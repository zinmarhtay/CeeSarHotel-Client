import { ProgressbarConfig } from './progressbar.config';
import { ProgressbarType } from './progressbar-type.interface';
import { BarComponent } from './bar.component';
import * as ɵngcc0 from '@angular/core';
export declare class ProgressbarComponent {
    /** if `true` changing value of progress bar will be animated */
    set animate(value: boolean);
    /** If `true`, striped classes are applied */
    set striped(value: boolean);
    /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */
    type: ProgressbarType;
    /** current value of progress bar. Could be a number or array of objects
     * like {"value":15,"type":"info","label":"15 %"}
     */
    set value(value: number | any[]);
    isStacked: boolean;
    _striped: boolean;
    _animate: boolean;
    _value: number | any[];
    get isBs3(): boolean;
    /** maximum total value of progress element */
    get max(): number;
    set max(v: number);
    addClass: boolean;
    bars: BarComponent[];
    protected _max: number;
    constructor(config: ProgressbarConfig);
    addBar(bar: BarComponent): void;
    removeBar(bar: BarComponent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProgressbarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ProgressbarComponent, "progressbar", never, { "animate": "animate"; "striped": "striped"; "value": "value"; "max": "max"; "type": "type"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInByb2dyZXNzYmFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9ncmVzc2JhckNvbmZpZyB9IGZyb20gJy4vcHJvZ3Jlc3NiYXIuY29uZmlnJztcbmltcG9ydCB7IFByb2dyZXNzYmFyVHlwZSB9IGZyb20gJy4vcHJvZ3Jlc3NiYXItdHlwZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQmFyQ29tcG9uZW50IH0gZnJvbSAnLi9iYXIuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFByb2dyZXNzYmFyQ29tcG9uZW50IHtcbiAgICAvKiogaWYgYHRydWVgIGNoYW5naW5nIHZhbHVlIG9mIHByb2dyZXNzIGJhciB3aWxsIGJlIGFuaW1hdGVkICovXG4gICAgc2V0IGFuaW1hdGUodmFsdWU6IGJvb2xlYW4pO1xuICAgIC8qKiBJZiBgdHJ1ZWAsIHN0cmlwZWQgY2xhc3NlcyBhcmUgYXBwbGllZCAqL1xuICAgIHNldCBzdHJpcGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICAvKiogcHJvdmlkZSBvbmUgb2YgdGhlIGZvdXIgc3VwcG9ydGVkIGNvbnRleHR1YWwgY2xhc3NlczogYHN1Y2Nlc3NgLCBgaW5mb2AsIGB3YXJuaW5nYCwgYGRhbmdlcmAgKi9cbiAgICB0eXBlOiBQcm9ncmVzc2JhclR5cGU7XG4gICAgLyoqIGN1cnJlbnQgdmFsdWUgb2YgcHJvZ3Jlc3MgYmFyLiBDb3VsZCBiZSBhIG51bWJlciBvciBhcnJheSBvZiBvYmplY3RzXG4gICAgICogbGlrZSB7XCJ2YWx1ZVwiOjE1LFwidHlwZVwiOlwiaW5mb1wiLFwibGFiZWxcIjpcIjE1ICVcIn1cbiAgICAgKi9cbiAgICBzZXQgdmFsdWUodmFsdWU6IG51bWJlciB8IGFueVtdKTtcbiAgICBpc1N0YWNrZWQ6IGJvb2xlYW47XG4gICAgX3N0cmlwZWQ6IGJvb2xlYW47XG4gICAgX2FuaW1hdGU6IGJvb2xlYW47XG4gICAgX3ZhbHVlOiBudW1iZXIgfCBhbnlbXTtcbiAgICBnZXQgaXNCczMoKTogYm9vbGVhbjtcbiAgICAvKiogbWF4aW11bSB0b3RhbCB2YWx1ZSBvZiBwcm9ncmVzcyBlbGVtZW50ICovXG4gICAgZ2V0IG1heCgpOiBudW1iZXI7XG4gICAgc2V0IG1heCh2OiBudW1iZXIpO1xuICAgIGFkZENsYXNzOiBib29sZWFuO1xuICAgIGJhcnM6IEJhckNvbXBvbmVudFtdO1xuICAgIHByb3RlY3RlZCBfbWF4OiBudW1iZXI7XG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBQcm9ncmVzc2JhckNvbmZpZyk7XG4gICAgYWRkQmFyKGJhcjogQmFyQ29tcG9uZW50KTogdm9pZDtcbiAgICByZW1vdmVCYXIoYmFyOiBCYXJDb21wb25lbnQpOiB2b2lkO1xufVxuIl19