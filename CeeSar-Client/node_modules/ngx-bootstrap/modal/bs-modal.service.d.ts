import { ComponentRef, TemplateRef, EventEmitter, RendererFactory2 } from '@angular/core';
import { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';
import { ModalBackdropComponent } from './modal-backdrop.component';
import { ModalOptions } from './modal-options.class';
import { BsModalRef } from './bs-modal-ref.service';
import * as ɵngcc0 from '@angular/core';
export declare class BsModalService {
    private clf;
    private modalDefaultOption;
    config: ModalOptions;
    onShow: EventEmitter<any>;
    onShown: EventEmitter<any>;
    onHide: EventEmitter<any>;
    onHidden: EventEmitter<any>;
    protected isBodyOverflowing: boolean;
    protected originalBodyPadding: number;
    protected scrollbarWidth: number;
    protected backdropRef: ComponentRef<ModalBackdropComponent>;
    private _backdropLoader;
    private modalsCount;
    private lastDismissReason;
    private loaders;
    private _renderer;
    constructor(rendererFactory: RendererFactory2, clf: ComponentLoaderFactory, modalDefaultOption: ModalOptions);
    /** Shows a modal */
    show(content: string | TemplateRef<any> | any, config?: ModalOptions): BsModalRef;
    hide(id?: number): void;
    _showBackdrop(): void;
    _hideBackdrop(): void;
    _showModal(content: any): BsModalRef;
    _hideModal(id?: number): void;
    getModalsCount(): number;
    setDismissReason(reason: string): void;
    removeBackdrop(): void;
    /** Checks if the body is overflowing and sets scrollbar width */
    /** @internal */
    checkScrollbar(): void;
    setScrollbar(): void;
    private resetScrollbar;
    private getScrollbarWidth;
    private _createLoaders;
    private removeLoaders;
    private copyEvent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BsModalService, [null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<BsModalService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtbW9kYWwuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJicy1tb2RhbC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIFRlbXBsYXRlUmVmLCBFdmVudEVtaXR0ZXIsIFJlbmRlcmVyRmFjdG9yeTIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudExvYWRlckZhY3RvcnkgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2NvbXBvbmVudC1sb2FkZXInO1xuaW1wb3J0IHsgTW9kYWxCYWNrZHJvcENvbXBvbmVudCB9IGZyb20gJy4vbW9kYWwtYmFja2Ryb3AuY29tcG9uZW50JztcbmltcG9ydCB7IE1vZGFsT3B0aW9ucyB9IGZyb20gJy4vbW9kYWwtb3B0aW9ucy5jbGFzcyc7XG5pbXBvcnQgeyBCc01vZGFsUmVmIH0gZnJvbSAnLi9icy1tb2RhbC1yZWYuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCc01vZGFsU2VydmljZSB7XG4gICAgcHJpdmF0ZSBjbGY7XG4gICAgcHJpdmF0ZSBtb2RhbERlZmF1bHRPcHRpb247XG4gICAgY29uZmlnOiBNb2RhbE9wdGlvbnM7XG4gICAgb25TaG93OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblNob3duOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkhpZGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uSGlkZGVuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcm90ZWN0ZWQgaXNCb2R5T3ZlcmZsb3dpbmc6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIG9yaWdpbmFsQm9keVBhZGRpbmc6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgc2Nyb2xsYmFyV2lkdGg6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgYmFja2Ryb3BSZWY6IENvbXBvbmVudFJlZjxNb2RhbEJhY2tkcm9wQ29tcG9uZW50PjtcbiAgICBwcml2YXRlIF9iYWNrZHJvcExvYWRlcjtcbiAgICBwcml2YXRlIG1vZGFsc0NvdW50O1xuICAgIHByaXZhdGUgbGFzdERpc21pc3NSZWFzb247XG4gICAgcHJpdmF0ZSBsb2FkZXJzO1xuICAgIHByaXZhdGUgX3JlbmRlcmVyO1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MiwgY2xmOiBDb21wb25lbnRMb2FkZXJGYWN0b3J5LCBtb2RhbERlZmF1bHRPcHRpb246IE1vZGFsT3B0aW9ucyk7XG4gICAgLyoqIFNob3dzIGEgbW9kYWwgKi9cbiAgICBzaG93KGNvbnRlbnQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4gfCBhbnksIGNvbmZpZz86IE1vZGFsT3B0aW9ucyk6IEJzTW9kYWxSZWY7XG4gICAgaGlkZShpZD86IG51bWJlcik6IHZvaWQ7XG4gICAgX3Nob3dCYWNrZHJvcCgpOiB2b2lkO1xuICAgIF9oaWRlQmFja2Ryb3AoKTogdm9pZDtcbiAgICBfc2hvd01vZGFsKGNvbnRlbnQ6IGFueSk6IEJzTW9kYWxSZWY7XG4gICAgX2hpZGVNb2RhbChpZD86IG51bWJlcik6IHZvaWQ7XG4gICAgZ2V0TW9kYWxzQ291bnQoKTogbnVtYmVyO1xuICAgIHNldERpc21pc3NSZWFzb24ocmVhc29uOiBzdHJpbmcpOiB2b2lkO1xuICAgIHJlbW92ZUJhY2tkcm9wKCk6IHZvaWQ7XG4gICAgLyoqIENoZWNrcyBpZiB0aGUgYm9keSBpcyBvdmVyZmxvd2luZyBhbmQgc2V0cyBzY3JvbGxiYXIgd2lkdGggKi9cbiAgICAvKiogQGludGVybmFsICovXG4gICAgY2hlY2tTY3JvbGxiYXIoKTogdm9pZDtcbiAgICBzZXRTY3JvbGxiYXIoKTogdm9pZDtcbiAgICBwcml2YXRlIHJlc2V0U2Nyb2xsYmFyO1xuICAgIHByaXZhdGUgZ2V0U2Nyb2xsYmFyV2lkdGg7XG4gICAgcHJpdmF0ZSBfY3JlYXRlTG9hZGVycztcbiAgICBwcml2YXRlIHJlbW92ZUxvYWRlcnM7XG4gICAgcHJpdmF0ZSBjb3B5RXZlbnQ7XG59XG4iXX0=